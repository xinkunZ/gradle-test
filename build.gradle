/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/java']
            excludes = ['**/*.java']
        }
    }
}

def topLevelPackage = "com.test.names"
def topLevelPackageRelativePath = topLevelPackage.replaceAll("\\.", "/")
def resourcesPackage = sourceSets.main.output.resourcesDir.getCanonicalPath()

task jarAll {
    description "Assembles classes under $topLevelPackage into separate jar archives"
    group "Build"
}

sourceSets.main.output.classesDirs.getAsFileTree().matching {
    include "**/$topLevelPackageRelativePath/**"
} visit({ fileVisitDetails ->
    if (fileVisitDetails.path.endsWith(topLevelPackageRelativePath) && fileVisitDetails.file.directory) {
        def files = fileVisitDetails.file.listFiles()
        files.each { subpackageDir ->
            def jarName = subpackageDir.path.replaceAll("\\\\", "/").split("/").last()
            println 'from: ' + subpackageDir
            println 'resources:' + resourcesPackage + topLevelPackageRelativePath
            tasks.create(name: "jar${jarName.capitalize()}", type: Jar, overwrite: true) {
                it.archiveName = "${jarName}.jar"
                from subpackageDir, {
                    into '/com/test/names/'
                }1
                description "Assembles a jar archive containing the classes only from package $topLevelPackage.$jarName"
                group "Build"
                jarAll.dependsOn it
            }
        }
    }
})

println sourceSets.main.output.resourcesDir

//
//sourceSets.main.allSource.matching {
//    include "**/$topLevelPackageRelativePath/**"
//}.visit({ fileVisitDetails ->
//    if (fileVisitDetails.path.endsWith(topLevelPackageRelativePath) && fileVisitDetails.file.directory) {
//        def files = fileVisitDetails.file.listFiles()
//        files.each { subpackageDir ->
//            def jarName = subpackageDir.path.replaceAll("\\\\", "/").split("/").last()
//            println jarName
//            tasks.create(name: "jar${jarName.capitalize()}", type: Jar, overwrite: true) {
//                it.archiveName = "${jarName}.jar"
//                from subpackageDir, {
//                    into '/com/test/names/'
//                }
//
//                description "Assembles a jar archive containing the classes only from package $topLevelPackage.$jarName"
//                group "Build"
//                jarAll.dependsOn it
//            }
//        }
//    }
//}
//)


